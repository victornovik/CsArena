using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CsArena.Tests;

public class RecordTests
{
    private record Customer(string FirstName, string LastName)
    {
        [property: JsonIgnore]
        public string FullName => $"{FirstName} {LastName}";

        // Override auto-generated protected PrintMembers
        protected virtual bool PrintMembers(StringBuilder b)
        {
            b.Append("FirstName: ");
            b.Append(FirstName);
            return true;
        }
    }

    private record struct CustomerStruct(string FirstName, string LastName);

    [Fact]
    public void RecordImmutableByDefaultTest()
    {
        // record does not generate setters by default
        var rec1 = new Customer("f", "l");
        // CS8852: Init-only property cannot be assigned
        // rec1.FirstName = "g";
        Assert.Equal("f", rec1.FirstName);

        var rec3 = rec1 with { FirstName = "a" };
        Assert.Equal("a", rec3.FirstName);

        // record struct generates setters by default
        var rec2 = new CustomerStruct("f", "l");
        Assert.Equal("f", rec2.FirstName);

        rec2.FirstName = "a";
        Assert.Equal("a", rec2.FirstName);
    }

    [Fact]
    public void RecordAutoGeneratedMethods()
    {
        Assert.True(typeof(Customer).IsClass);

        // Deconstruct() is generated automatically
        var c1 = new Customer("Victor", "Novik");
        Assert.True(c1 is (_, "Novik"));
        Assert.Equal("Victor Novik", c1.FullName);

        // ToString() is generated automatically
        Assert.Equal("Customer { FirstName: Victor }", c1.ToString());

        // Record equality check is based on values
        var c2 = new Customer("Victor", "Novik");
        Assert.Equal("Novik", c2.LastName);
        Assert.Equal(c1, c2);
    }

    [Fact]
    public void With()
    {
        var c1 = new Customer("Victor", "Novik");
        var c2 = c1 with { FirstName = "Vlad" };

        Assert.Equal("Vlad", c2.FirstName);
    }

    [Fact]
    public void SerializeRecord()
    {
        var c1 = new Customer("Victor", "Novik");
        var json = JsonSerializer.Serialize(c1, options: new() { WriteIndented = true });

        Assert.Equal("""
                     {
                       "FirstName": "Victor",
                       "LastName": "Novik"
                     }
                     """, json);

        var c2 = JsonSerializer.Deserialize<Customer>(json);

        Assert.True(c2 is ("Victor", "Novik"));
        Assert.Equal("Victor Novik", c2.FullName);
    }

    [Fact]
    public void RecordStructTest()
    {
        var c1 = new CustomerStruct("Victor", "Novik");
        Assert.True(typeof(CustomerStruct).IsValueType);
        Assert.Equal("Novik", c1.LastName);
        Assert.Equal("Victor", c1.FirstName);
        Assert.Equal("CustomerStruct { FirstName = Victor, LastName = Novik }", c1.ToString());
    }
}